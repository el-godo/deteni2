(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'mechera'"
p3
sS'layer'
p4
S'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/appadmin.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# ##########################################################\n# ## make sure administrator is on localhost\n# ###########################################################\n\nimport os\nimport socket\nimport datetime\nimport copy\nimport gluon.contenttype\nimport gluon.fileutils\n\ntry:\n    import pygraphviz as pgv\nexcept ImportError:\n    pgv = None\n\nis_gae = request.env.web2py_runtime_gae or False\n\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\', \'127.0.0.1\', \'::ffff:127.0.0.1\')\nexcept:\n    hosts = (http_host, )\n\nif request.is_https:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1") and \\\n    (request.function != \'manage\'):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\n\nif request.function == \'manage\':\n    if not \'auth\' in globals() or not request.args:\n        redirect(URL(request.controller, \'index\'))\n    manager_action = auth.settings.manager_actions.get(request.args(0), None)\n    if manager_action is None and request.args(0) == \'auth\':\n        manager_action = dict(role=auth.settings.auth_manager_role,\n                              heading=T(\'Manage Access Control\'),\n                              tables=[auth.table_user(),\n                                      auth.table_group(),\n                                      auth.table_permission()])\n    manager_role = manager_action.get(\'role\', None) if manager_action else None\n    if not (gluon.fileutils.check_credentials(request) or auth.has_membership(manager_role)):\n        raise HTTP(403, "Not authorized")\n    menu = False\nelif (request.application == \'admin\' and not session.authorized) or \\\n        (request.application != \'admin\' and not gluon.fileutils.check_credentials(request)):\n    redirect(URL(\'admin\', \'default\', \'index\',\n                 vars=dict(send=URL(args=request.args, vars=request.vars))))\nelse:\n    response.subtitle = T(\'Database Administration (appadmin)\')\n    menu = True\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nif menu:\n    response.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(\'index\')], [T(\'state\'), False,\n                 URL(\'state\')], [T(\'cache\'), False,\n                 URL(\'ccache\')]]\n\n# ##########################################################\n# ## auxiliary functions\n# ###########################################################\n\nif False and request.tickets_db:\n    from gluon.restricted import TicketStorage\n    ts = TicketStorage()\n    ts._get_table(request.tickets_db, ts.tablename, request.application)\n\ndef get_databases(request):\n    dbs = {}\n    for (key, value) in global_env.items():\n        try:\n            cond = isinstance(value, GQLDB)\n        except:\n            cond = isinstance(value, SQLDB)\n        if cond:\n            dbs[key] = value\n    return dbs\n\ndatabases = get_databases(None)\n\ndef eval_in_global_env(text):\n    exec (\'_ret=%s\' % text, {}, global_env)\n    return global_env[\'_ret\']\n\n\ndef get_database(request):\n    if request.args and request.args[0] in databases:\n        return eval_in_global_env(request.args[0])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\ndef get_table(request):\n    db = get_database(request)\n    if len(request.args) > 1 and request.args[1] in db.tables:\n        return (db, request.args[1])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\n\ndef get_query(request):\n    try:\n        return eval_in_global_env(request.vars.query)\n    except Exception:\n        return None\n\n\ndef query_by_table_type(tablename, db, request=request):\n    keyed = hasattr(db[tablename], \'_primarykey\')\n    if keyed:\n        firstkey = db[tablename][db[tablename]._primarykey[0]]\n        cond = \'>0\'\n        if firstkey.type in [\'string\', \'text\']:\n            cond = \'!=""\'\n        qry = \'%s.%s.%s%s\' % (\n            request.args[0], request.args[1], firstkey.name, cond)\n    else:\n        qry = \'%s.%s.id>0\' % tuple(request.args[:2])\n    return qry\n\n\n# ##########################################################\n# ## list all databases and tables\n# ###########################################################\ndef index():\n    return dict(databases=databases)\n\n\n# ##########################################################\n# ## insert a new record\n# ###########################################################\n\n\ndef insert():\n    (db, table) = get_table(request)\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n    if form.accepts(request.vars, session):\n        response.flash = T(\'new record inserted\')\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## list all records in table and insert new record\n# ###########################################################\n\n\ndef download():\n    import os\n    db = get_database(request)\n    return response.download(request, db)\n\n\ndef csv():\n    import gluon.contenttype\n    response.headers[\'Content-Type\'] = \\\n        gluon.contenttype.contenttype(\'.csv\')\n    db = get_database(request)\n    query = get_query(request)\n    if not query:\n        return None\n    response.headers[\'Content-disposition\'] = \'attachment; filename=%s_%s.csv\'\\\n        % tuple(request.vars.query.split(\'.\')[:2])\n    return str(db(query, ignore_common_filters=True).select())\n\n\ndef import_csv(table, file):\n    table.import_from_csv_file(file)\n\n\ndef select():\n    import re\n    db = get_database(request)\n    dbname = request.args[0]\n    try:\n        is_imap = db._uri.startswith("imap://")\n    except (KeyError, AttributeError, TypeError):\n        is_imap = False\n    regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>\\d+)\')\n    if len(request.args) > 1 and hasattr(db[request.args[1]], \'_primarykey\'):\n        regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>.+)\')\n    if request.vars.query:\n        match = regex.match(request.vars.query)\n        if match:\n            request.vars.query = \'%s.%s.%s==%s\' % (request.args[0],\n                                                   match.group(\'table\'), match.group(\'field\'),\n                                                   match.group(\'value\'))\n    else:\n        request.vars.query = session.last_query\n    query = get_query(request)\n    if request.vars.start:\n        start = int(request.vars.start)\n    else:\n        start = 0\n    nrows = 0\n\n    step = 100\n    fields = []\n\n    if is_imap:\n        step = 3\n \n    stop = start + step\n\n    table = None\n    rows = []\n    orderby = request.vars.orderby\n    if orderby:\n        orderby = dbname + \'.\' + orderby\n        if orderby == session.last_orderby:\n            if orderby[0] == \'~\':\n                orderby = orderby[1:]\n            else:\n                orderby = \'~\' + orderby\n    session.last_orderby = orderby\n    session.last_query = request.vars.query\n    form = FORM(TABLE(TR(T(\'Query:\'), \'\', INPUT(_style=\'width:400px\',\n                _name=\'query\', _value=request.vars.query or \'\',\n                requires=IS_NOT_EMPTY(\n                    error_message=T("Cannot be empty")))), TR(T(\'Update:\'),\n                INPUT(_name=\'update_check\', _type=\'checkbox\',\n                value=False), INPUT(_style=\'width:400px\',\n                _name=\'update_fields\', _value=request.vars.update_fields\n                                    or \'\')), TR(T(\'Delete:\'), INPUT(_name=\'delete_check\',\n                _class=\'delete\', _type=\'checkbox\', value=False), \'\'),\n                TR(\'\', \'\', INPUT(_type=\'submit\', _value=T(\'submit\')))),\n                _action=URL(r=request, args=request.args))\n\n    tb = None\n    if form.accepts(request.vars, formname=None):\n        regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\..+\')\n        match = regex.match(form.vars.query.strip())\n        if match:\n            table = match.group(\'table\')\n        try:\n            nrows = db(query, ignore_common_filters=True).count()\n            if form.vars.update_check and form.vars.update_fields:\n                db(query, ignore_common_filters=True).update(\n                    **eval_in_global_env(\'dict(%s)\' % form.vars.update_fields))\n                response.flash = T(\'%s %%{row} updated\', nrows)\n            elif form.vars.delete_check:\n                db(query, ignore_common_filters=True).delete()\n                response.flash = T(\'%s %%{row} deleted\', nrows)\n            nrows = db(query, ignore_common_filters=True).count()\n\n            if is_imap:\n                fields = [db[table][name] for name in\n                    ("id", "uid", "created", "to",\n                     "sender", "subject")]\n            if orderby:\n                rows = db(query, ignore_common_filters=True).select(\n                              *fields, limitby=(start, stop),\n                              orderby=eval_in_global_env(orderby))\n            else:\n                rows = db(query, ignore_common_filters=True).select(\n                    *fields, limitby=(start, stop))\n        except Exception, e:\n            import traceback\n            tb = traceback.format_exc()\n            (rows, nrows) = ([], 0)\n            response.flash = DIV(T(\'Invalid Query\'), PRE(str(e)))\n    # begin handle upload csv\n    csv_table = table or request.vars.table\n    if csv_table:\n        formcsv = FORM(str(T(\'or import from csv file\')) + " ",\n                       INPUT(_type=\'file\', _name=\'csvfile\'),\n                       INPUT(_type=\'hidden\', _value=csv_table, _name=\'table\'),\n                       INPUT(_type=\'submit\', _value=T(\'import\')))\n    else:\n        formcsv = None\n    if formcsv and formcsv.process().accepted:\n        try:\n            import_csv(db[request.vars.table],\n                       request.vars.csvfile.file)\n            response.flash = T(\'data uploaded\')\n        except Exception, e:\n            response.flash = DIV(T(\'unable to parse csv file\'), PRE(str(e)))\n    # end handle upload csv\n\n    return dict(\n        form=form,\n        table=table,\n        start=start,\n        stop=stop,\n        step=step,\n        nrows=nrows,\n        rows=rows,\n        query=request.vars.query,\n        formcsv=formcsv,\n        tb=tb\n    )\n\n\n# ##########################################################\n# ## edit delete one record\n# ###########################################################\n\n\ndef update():\n    (db, table) = get_table(request)\n    keyed = hasattr(db[table], \'_primarykey\')\n    record = None\n    db[table]._common_filter = None\n    if keyed:\n        key = [f for f in request.vars if f in db[table]._primarykey]\n        if key:\n            record = db(db[table][key[0]] == request.vars[key[\n                        0]]).select().first()\n    else:\n        record = db(db[table].id == request.args(\n            2)).select().first()\n\n    if not record:\n        qry = query_by_table_type(table, db)\n        session.flash = T(\'record does not exist\')\n        redirect(URL(\'select\', args=request.args[:1],\n                     vars=dict(query=qry)))\n\n    if keyed:\n        for k in db[table]._primarykey:\n            db[table][k].writable = False\n\n    form = SQLFORM(\n        db[table], record, deletable=True, delete_label=T(\'Check to delete\'),\n        ignore_rw=ignore_rw and not keyed,\n        linkto=URL(\'select\',\n                   args=request.args[:1]), upload=URL(r=request,\n                                                      f=\'download\', args=request.args[:1]))\n\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n        qry = query_by_table_type(table, db)\n        redirect(URL(\'select\', args=request.args[:1],\n                 vars=dict(query=qry)))\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## get global variables\n# ###########################################################\n\n\ndef state():\n    return dict()\n\n\ndef ccache():\n    if is_gae:\n        form = FORM(\n            P(TAG.BUTTON(T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")))\n    else:\n        cache.ram.initialize()\n        cache.disk.initialize()\n\n        form = FORM(\n            P(TAG.BUTTON(\n                T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")),\n            P(TAG.BUTTON(\n                T("Clear RAM"), _type="submit", _name="ram", _value="ram")),\n            P(TAG.BUTTON(\n                T("Clear DISK"), _type="submit", _name="disk", _value="disk")),\n        )\n\n    if form.accepts(request.vars, session):\n        session.flash = ""\n        if is_gae:\n            if request.vars.yes:\n                cache.ram.clear()\n                session.flash += T("Cache Cleared")\n        else:\n            clear_ram = False\n            clear_disk = False\n            if request.vars.yes:\n                clear_ram = clear_disk = True\n            if request.vars.ram:\n                clear_ram = True\n            if request.vars.disk:\n                clear_disk = True\n            if clear_ram:\n                cache.ram.clear()\n                session.flash += T("Ram Cleared")\n            if clear_disk:\n                cache.disk.clear()\n                session.flash += T("Disk Cleared")\n        redirect(URL(r=request))\n\n    try:\n        from guppy import hpy\n        hp = hpy()\n    except ImportError:\n        hp = False\n\n    import shelve\n    import os\n    import copy\n    import time\n    import math\n    from gluon import portalocker\n\n    ram = {\n        \'entries\': 0,\n        \'bytes\': 0,\n        \'objects\': 0,\n        \'hits\': 0,\n        \'misses\': 0,\n        \'ratio\': 0,\n        \'oldest\': time.time(),\n        \'keys\': []\n    }\n    \n    disk = copy.copy(ram)\n    total = copy.copy(ram)\n    disk[\'keys\'] = []\n    total[\'keys\'] = []\n\n    def GetInHMS(seconds):\n        hours = math.floor(seconds / 3600)\n        seconds -= hours * 3600\n        minutes = math.floor(seconds / 60)\n        seconds -= minutes * 60\n        seconds = math.floor(seconds)\n\n        return (hours, minutes, seconds)\n\n    if is_gae:\n        gae_stats = cache.ram.client.get_stats()\n        try:\n            gae_stats[\'ratio\'] = ((gae_stats[\'hits\'] * 100) /\n                (gae_stats[\'hits\'] + gae_stats[\'misses\']))\n        except ZeroDivisionError:\n            gae_stats[\'ratio\'] = T("?")\n        gae_stats[\'oldest\'] = GetInHMS(time.time() - gae_stats[\'oldest_item_age\'])\n        total.update(gae_stats)\n    else:\n        # get ram stats directly from the cache object\n        ram_stats = cache.ram.stats[request.application]\n        ram[\'hits\'] = ram_stats[\'hit_total\'] - ram_stats[\'misses\']\n        ram[\'misses\'] = ram_stats[\'misses\']\n        try:\n            ram[\'ratio\'] = ram[\'hits\'] * 100 / ram_stats[\'hit_total\']\n        except (KeyError, ZeroDivisionError):\n            ram[\'ratio\'] = 0\n\n        for key, value in cache.ram.storage.iteritems():\n            if hp:\n                ram[\'bytes\'] += hp.iso(value[1]).size\n                ram[\'objects\'] += hp.iso(value[1]).count\n            ram[\'entries\'] += 1\n            if value[0] < ram[\'oldest\']:\n                ram[\'oldest\'] = value[0]\n            ram[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        for key in cache.disk.storage:\n            value = cache.disk.storage[key]\n            if isinstance(value[1], dict):\n                disk[\'hits\'] = value[1][\'hit_total\'] - value[1][\'misses\']\n                disk[\'misses\'] = value[1][\'misses\']\n                try:\n                    disk[\'ratio\'] = disk[\'hits\'] * 100 / value[1][\'hit_total\']\n                except (KeyError, ZeroDivisionError):\n                    disk[\'ratio\'] = 0\n            else:\n                if hp:\n                    disk[\'bytes\'] += hp.iso(value[1]).size\n                    disk[\'objects\'] += hp.iso(value[1]).count\n                disk[\'entries\'] += 1\n                if value[0] < disk[\'oldest\']:\n                    disk[\'oldest\'] = value[0]\n                disk[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        ram_keys = ram.keys() # [\'hits\', \'objects\', \'ratio\', \'entries\', \'keys\', \'oldest\', \'bytes\', \'misses\']\n        ram_keys.remove(\'ratio\')\n        ram_keys.remove(\'oldest\')\n        for key in ram_keys:\n            total[key] = ram[key] + disk[key]\n\n        try:\n            total[\'ratio\'] = total[\'hits\'] * 100 / (total[\'hits\'] +\n                                                total[\'misses\'])\n        except (KeyError, ZeroDivisionError):\n            total[\'ratio\'] = 0\n\n        if disk[\'oldest\'] < ram[\'oldest\']:\n            total[\'oldest\'] = disk[\'oldest\']\n        else:\n            total[\'oldest\'] = ram[\'oldest\']\n\n        ram[\'oldest\'] = GetInHMS(time.time() - ram[\'oldest\'])\n        disk[\'oldest\'] = GetInHMS(time.time() - disk[\'oldest\'])\n        total[\'oldest\'] = GetInHMS(time.time() - total[\'oldest\'])\n\n    def key_table(keys):\n        return TABLE(\n            TR(TD(B(T(\'Key\'))), TD(B(T(\'Time in Cache (h:m:s)\')))),\n            *[TR(TD(k[0]), TD(\'%02d:%02d:%02d\' % k[1])) for k in keys],\n            **dict(_class=\'cache-keys\',\n                   _style="border-collapse: separate; border-spacing: .5em;"))\n\n    if not is_gae:\n        ram[\'keys\'] = key_table(ram[\'keys\'])\n        disk[\'keys\'] = key_table(disk[\'keys\'])\n        total[\'keys\'] = key_table(total[\'keys\'])\n\n    return dict(form=form, total=total,\n                ram=ram, disk=disk, object_stats=hp != False)\n\n\ndef table_template(table):\n    from gluon.html import TR, TD, TABLE, TAG\n\n    def FONT(*args, **kwargs):\n        return TAG.font(*args, **kwargs)\n\n    def types(field):\n        f_type = field.type\n        if not isinstance(f_type,str):\n            return \' \'\n        elif f_type == \'string\':\n            return field.length\n        elif f_type == \'id\':\n            return B(\'pk\')\n        elif f_type.startswith(\'reference\') or \\\n                f_type.startswith(\'list:reference\'):\n            return B(\'fk\')\n        else:\n            return \' \'\n\n    # This is horribe HTML but the only one graphiz understands\n    rows = []\n    cellpadding = 4\n    color = "#000000"\n    bgcolor = "#FFFFFF"\n    face = "Helvetica"\n    face_bold = "Helvetica Bold"\n    border = 0\n\n    rows.append(TR(TD(FONT(table, _face=face_bold, _color=bgcolor),\n                           _colspan=3, _cellpadding=cellpadding,\n                           _align="center", _bgcolor=color)))\n    for row in db[table]:\n        rows.append(TR(TD(FONT(row.name, _color=color, _face=face_bold),\n                              _align="left", _cellpadding=cellpadding,\n                              _border=border),\n                       TD(FONT(row.type, _color=color, _face=face),\n                               _align="left", _cellpadding=cellpadding,\n                               _border=border),\n                       TD(FONT(types(row), _color=color, _face=face),\n                               _align="center", _cellpadding=cellpadding,\n                               _border=border)))\n    return "< %s >" % TABLE(*rows, **dict(_bgcolor=bgcolor, _border=1,\n                                          _cellborder=0, _cellspacing=0)\n                             ).xml()\n\n\ndef bg_graph_model():\n    graph = pgv.AGraph(layout=\'dot\',  directed=True,  strict=False,  rankdir=\'LR\')\n\n    subgraphs = dict()\n    for tablename in db.tables:\n        if hasattr(db[tablename],\'_meta_graphmodel\'):\n            meta_graphmodel = db[tablename]._meta_graphmodel\n        else:\n            meta_graphmodel = dict(group=request.application, color=\'#ECECEC\')\n\n        group = meta_graphmodel[\'group\'].replace(\' \', \'\')\n        if group not in subgraphs:\n            subgraphs[group] = dict(meta=meta_graphmodel, tables=[])\n        subgraphs[group][\'tables\'].append(tablename)\n\n        graph.add_node(tablename, name=tablename, shape=\'plaintext\',\n                       label=table_template(tablename))\n\n    for n, key in enumerate(subgraphs.iterkeys()):\n        graph.subgraph(nbunch=subgraphs[key][\'tables\'],\n                    name=\'cluster%d\' % n,\n                    style=\'filled\',\n                    color=subgraphs[key][\'meta\'][\'color\'],\n                    label=subgraphs[key][\'meta\'][\'group\'])\n\n    for tablename in db.tables:\n        for field in db[tablename]:\n            f_type = field.type\n            if isinstance(f_type,str) and (\n                f_type.startswith(\'reference\') or\n                f_type.startswith(\'list:reference\')):\n                referenced_table = f_type.split()[1].split(\'.\')[0]\n                n1 = graph.get_node(tablename)\n                n2 = graph.get_node(referenced_table)\n                graph.add_edge(n1, n2, color="#4C4C4C", label=\'\')\n\n    graph.layout()\n    if not request.args:\n        response.headers[\'Content-Type\'] = \'image/png\'\n        return graph.draw(format=\'png\', prog=\'dot\')\n    else:\n        response.headers[\'Content-Disposition\']=\'attachment;filename=graph.%s\'%request.args(0)\n        if request.args(0) == \'dot\':\n            return graph.string()\n        else:\n            return graph.draw(format=request.args(0), prog=\'dot\')\n\ndef graph_model():\n    return dict(databases=databases, pgv=pgv)\n\ndef manage():\n    tables = manager_action[\'tables\']\n    if isinstance(tables[0], str):\n        db = manager_action.get(\'db\', auth.db)\n        db = globals()[db] if isinstance(db, str) else db\n        tables = [db[table] for table in tables]\n    if request.args(0) == \'auth\':\n        auth.table_user()._plural = T(\'Users\')\n        auth.table_group()._plural = T(\'Roles\')\n        auth.table_membership()._plural = T(\'Memberships\')\n        auth.table_permission()._plural = T(\'Permissions\')\n    if request.extension != \'load\':\n        return dict(heading=manager_action.get(\'heading\',\n                    T(\'Manage %(action)s\') % dict(action=request.args(0).replace(\'_\', \' \').title())),\n                    tablenames=[table._tablename for table in tables],\n                    labels=[table._plural.title() for table in tables])\n\n    table = tables[request.args(1, cast=int)]\n    formname = \'%s_grid\' % table._tablename\n    linked_tables = orderby = None\n    if request.args(0) == \'auth\':\n        auth.table_group()._id.readable = \\\n        auth.table_membership()._id.readable = \\\n        auth.table_permission()._id.readable = False\n        auth.table_membership().user_id.label = T(\'User\')\n        auth.table_membership().group_id.label = T(\'Role\')\n        auth.table_permission().group_id.label = T(\'Role\')\n        auth.table_permission().name.label = T(\'Permission\')\n        if table == auth.table_user():\n            linked_tables=[auth.settings.table_membership_name]\n        elif table == auth.table_group():\n            orderby = \'role\' if not request.args(3) or \'.group_id\' not in request.args(3) else None\n        elif table == auth.table_permission():\n            orderby = \'group_id\'\n    kwargs = dict(user_signature=True, maxtextlength=1000,\n                  orderby=orderby, linked_tables=linked_tables)\n    smartgrid_args = manager_action.get(\'smartgrid_args\', {})\n    kwargs.update(**smartgrid_args.get(\'DEFAULT\', {}))\n    kwargs.update(**smartgrid_args.get(table._tablename, {}))\n    grid = SQLFORM.smartgrid(table, args=request.args[:2], formname=formname, **kwargs)\n    return grid\n\ndef hooks():\n    import functools\n    import inspect\n    list_op=[\'_%s_%s\' %(h,m) for h in [\'before\', \'after\'] for m in [\'insert\',\'update\',\'delete\']]\n    tables=[]\n    with_build_it=False\n    for db_str in sorted(databases):\n        db = databases[db_str]\n        for t in db.tables:\n            method_hooks=[]\n            for op in list_op:\n                functions = []\n                for f in getattr(db[t], op):\n                    if hasattr(f, \'__call__\'):\n                        try:\n                            if isinstance(f, (functools.partial)):\n                                f = f.func\n                            filename = inspect.getsourcefile(f)\n                            details = {\'funcname\':f.__name__,\n                                       \'filename\':filename[len(request.folder):] if request.folder in filename else None,\n                                       \'lineno\': inspect.getsourcelines(f)[1]}\n                            if details[\'filename\']: # Built in functions as delete_uploaded_files are not editable\n                                details[\'url\'] = URL(a=\'admin\',c=\'default\',f=\'edit\', args=[request[\'application\'], details[\'filename\']],vars={\'lineno\':details[\'lineno\']})\n                            if details[\'filename\'] or with_build_it:\n                                functions.append(details)\n                        # compiled app and windows build don\'t support code inspection\n                        except:\n                            pass\n                if len(functions):\n                    method_hooks.append({\'name\':op, \'functions\':functions})\n            if len(method_hooks):\n                tables.append({\'name\':"%s.%s" % (db_str,t), \'slug\': IS_SLUG()("%s.%s" % (db_str,t))[0], \'method_hooks\':method_hooks})\n    # Render\n    ul_main = UL(_class=\'nav nav-list\')\n    for t in tables:\n        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))\n        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')\n        for op in t[\'method_hooks\']:\n            ul_t.append(LI (op[\'name\']))\n            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))\n        ul_main.append(ul_t)\n    return ul_main\n\nresponse._vars=response._caller(insert)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.ValueError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.ValueError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.ValueError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.ValueError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.ValueError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.ValueError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.ValueError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.ValueError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.ValueError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.ValueError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.ValueError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.ValueError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.ValueError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.ValueError object>"
p41
sS'args'
p42
S'("invalid literal for long() with base 10: \'mechera\'",)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.ValueError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument value (of correct type).'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.ValueError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"invalid literal for long() with base 10: 'mechera'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's8{\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>deteni2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>db</div></td></tr><tr><td><div>ingreso</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>appadmin</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-3018352e-dcd6-431d-a2db-deeccb8e46fe<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_alumno</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6001296d-7f4c-435e-8219-f08406a71762<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_armeria</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bad9b9a1-e548-4876-b64d-b6e62fafc37f<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_deteni2</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_oficios</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-a242958c-ce7c-48de-9649-c73bf87b202d<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_prestamos</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-e35a1309-30f2-488d-8be5-ed3555de449c<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_turnos</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-dbbeae17-7541-4cd5-92a1-57dd858f2fdb<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-e8a16866-c1f9-44c8-919e-2a303fb8482a<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-e8a16866-c1f9-44c8-919e-2a303fb8482a; session_id_admin=127.0.0.1-3018352e-dcd6-431d-a2db-deeccb8e46fe; session_id_deteni2=127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21; session_id_alumno=127.0.0.1-6001296d-7f4c-435e-8219-f08406a71762; session_id_prestamos=127.0.0.1-e35a1309-30f2-488d-8be5-ed3555de449c; session_id_oficios=127.0.0.1-a242958c-ce7c-48de-9649-c73bf87b202d; session_id_armeria=127.0.0.1-bad9b9a1-e548-4876-b64d-b6e62fafc37f; session_id_turnos=127.0.0.1-dbbeae17-7541-4cd5-92a1-57dd858f2fdb</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_DNT</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/deteni2/appadmin/index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_UPGRADE_INSECURE_REQUESTS</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1; rv:48.0) Gecko/20100101 Firefox/48.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/deteni2/appadmin/insert/db/ingreso</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>12609</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>Policia-PC</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\deteni2\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\turnos\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\armeria\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\admin\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\prestamos\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\oficios\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\alumno\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\welcome\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x25d3eb8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Policia-PC&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-e8a16866-c1f9-44c8-919e-2a303fb8482a; session_id_admin=127.0.0.1-3018352e-dcd6-431d-a2db-deeccb8e46fe; session_id_deteni2=127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21; session_id_alumno=127.0.0.1-6001296d-7f4c-435e-8219-f08406a71762; session_id_prestamos=127.0.0.1-e35a1309-30f2-488d-8be5-ed3555de449c; session_id_oficios=127.0.0.1-a242958c-ce7c-48de-9649-c73bf87b202d; session_id_armeria=127.0.0.1-bad9b9a1-e548-4876-b64d-b6e62fafc37f; session_id_turnos=127.0.0.1-dbbeae17-7541-4cd5-92a1-57dd858f2fdb</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_dnt</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/deteni2/appadmin/index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_upgrade_insecure_requests</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1; rv:48.0) Gecko/20100101 Firefox/48.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>fe80::519f:8c80:275f:a5cd%11</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>Policia-PC</div></td></tr><tr><td><div>10.0.0.109</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/deteni2/appadmin/insert/db/ingreso</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>12609</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/deteni2/appadmin/insert/db/ingreso</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>Policia-PC</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x012ED0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x027630D8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x07A2C8F0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x012ED0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x027630D8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x07A2C8F0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>insert</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\deteni2\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\turnos\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\armeria\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\admin\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\prestamos\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\oficios\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\alumno\\\\&#x27;, &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\welcome\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x25d3eb8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Policia-PC&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>fe80::519f:8c80:275f:a5cd%11</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>Policia-PC</div></td></tr><tr><td><div>10.0.0.109</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 10, 6, 19, 22, 6, 290000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>db/ingreso</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/deteni2/appadmin/insert/db/ingreso</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 10, 6, 22, 22, 6, 290000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x08993750&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 088784E8, file "D:\\back...cations\\deteni2\\controllers/appadmin.py", line 7>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n\\n# #####################...ul_main\\n\\nresponse._vars=response._caller(insert)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer=r'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/appadmin.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers\\appadmin.py'
p88
sg64
(dp89
sg70
I703
sg71
(dp90
I692
S'    # Render'
p91
sI693
S"    ul_main = UL(_class='nav nav-list')"
p92
sI694
S'    for t in tables:'
p93
sI695
S'        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))'
p94
sI696
S'        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')'
p95
sI697
S"        for op in t['method_hooks']:"
p96
sI698
S"            ul_t.append(LI (op['name']))"
p97
sI699
S'            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))'
p98
sI700
S'        ul_main.append(ul_t)'
p99
sI701
S'    return ul_main'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function insert>'
p108
ssg70
I417
sg71
(dp109
I416
S'        self._vars = None'
p110
sI417
S'        self._caller = lambda f: f()'
p111
sI418
S'        self._view_environment = None'
p112
sI419
S'        self._custom_commit = None'
p113
sI420
S'        self._custom_rollback = None'
p114
sI421
S"        self.generic_patterns = ['*']"
p115
sI412
S"        self.flash = ''            # used by the default view layout"
p116
sI413
S'        self.meta = Storage()      # used by web2py_ajax.html'
p117
sI414
S'        self.menu = []             # used by the default view layout'
p118
sI415
S'        self.files = []            # used by web2py_ajax.html'
p119
ssg83
S'(f=<function insert>)'
p120
sg85
S'<lambda>'
p121
sa(dp122
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers\\appadmin.py'
p123
sg64
(dp124
S'global SQLFORM'
p125
S"<class 'gluon.sqlhtml.SQLFORM'>"
p126
sS'db'
p127
S'<DAL uri="sqlite://storage.sqlite">'
p128
sS'global ignore_rw'
p129
S'True'
p130
sS'form'
p131
g107
sS'table'
p132
S"'ingreso'"
p133
ssg70
I150
sg71
(dp134
I145
S'# ###########################################################'
p135
sI146
S''
sI147
S''
sI148
S'def insert():'
p136
sI149
S'    (db, table) = get_table(request)'
p137
sI150
S'    form = SQLFORM(db[table], ignore_rw=ignore_rw)'
p138
sI151
S'    if form.accepts(request.vars, session):'
p139
sI152
S"        response.flash = T('new record inserted')"
p140
sI153
S'    return dict(form=form, table=db[table])'
p141
sI154
S''
ssg83
S'()'
p142
sg85
S'insert'
p143
sa(dp144
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\sqlhtml.py'
p145
sg64
(dp146
S'default'
p147
S'None'
p148
sS'self.widgets.options.widget'
p149
S"<bound method type.widget of <class 'gluon.sqlhtml.OptionsWidget'>>"
p150
sS'self'
p151
S'<gluon.sqlhtml.SQLFORM object>'
p152
sS'inp'
p153
g107
sS'self.widgets'
p154
S"<Storage {'multiple': <class 'gluon.sqlhtml.Mult...ss 'gluon.sqlhtml.OptionsWidget'>, 'blob': None}>"
p155
sS'field'
p156
S'<pydal.objects.Field object>'
p157
sS'self.widgets.options'
p158
S"<class 'gluon.sqlhtml.OptionsWidget'>"
p159
ssg70
I1295
sg71
(dp160
I1290
S"                    inpval = 'checked'"
p161
sI1291
S'                else:'
p162
sI1292
S"                    inpval = ''"
p163
sI1293
S'            elif OptionsWidget.has_options(field):'
p164
sI1294
S'                if not field.requires.multiple:'
p165
sI1295
S'                    inp = self.widgets.options.widget(field, default)'
p166
sI1296
S'                else:'
p167
sI1297
S'                    inp = self.widgets.multiple.widget(field, default)'
p168
sI1298
S'                if fieldname in keepopts:'
p169
sI1299
S'                    inpval = CAT(*inp.components)'
p170
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, table=<Table ingreso (id, persona, comisaria, Organismo_judicial, calidad, comentario, horario_ingreso)>, record=None, deletable=False, linkto=None, upload=None, fields=['id', 'persona', 'comisaria', 'Organismo_judicial', 'calidad', 'comentario', 'horario_ingreso'], labels=None, col3={}, submit_button='Submit', delete_label='Check to delete', showid=True, readonly=False, comments=True, keepopts=[], ignore_rw=True, record_id=None, formstyle=None, buttons=['submit'], separator=None, extra_fields=[], **attributes={})"
p171
sg85
g50
sa(dp172
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\sqlhtml.py'
p173
sg64
(dp174
S'].options'
p175
g107
sS'requires'
p176
S'[<gluon.validators.IS_IN_DB object>]'
p177
sS'options'
p178
g107
ssg70
I313
sg71
(dp179
I308
S'        requires = field.requires'
p180
sI309
S'        if not isinstance(requires, (list, tuple)):'
p181
sI310
S'            requires = [requires]'
p182
sI311
S'        if requires:'
p183
sI312
S"            if hasattr(requires[0], 'options'):"
p184
sI313
S'                options = requires[0].options()'
p185
sI314
S'            else:'
p186
sI315
S'                raise SyntaxError('
p187
sI316
S"                    'widget cannot determine options of %s' % field)"
p188
sI317
S'        opts = [OPTION(v, _value=k) for (k, v) in options]'
p189
ssg83
S"(cls=<class 'gluon.sqlhtml.OptionsWidget'>, field=<pydal.objects.Field object>, value=None, **attributes={})"
p190
sg85
S'widget'
p191
sa(dp192
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\validators.py'
p193
sg64
(dp194
S'self'
p195
S'<gluon.validators.IS_IN_DB object>'
p196
sS'self.build_set'
p197
S'<bound method IS_IN_DB.build_set of <gluon.validators.IS_IN_DB object>>'
p198
ssg70
I598
sg71
(dp199
I593
S'            self.labels = [self.label % r for r in records]'
p200
sI594
S'        else:'
p201
sI595
S'            self.labels = [self.label(r) for r in records]'
p202
sI596
S''
sI597
S'    def options(self, zero=True):'
p203
sI598
S'        self.build_set()'
p204
sI599
S'        items = [(k, self.labels[i]) for (i, k) in enumerate(self.theset)]'
p205
sI600
S'        if self.sort:'
p206
sI601
S'            items.sort(options_sorter)'
p207
sI602
S'        if zero and self.zero is not None and not self.multiple:'
p208
ssg83
S'(self=<gluon.validators.IS_IN_DB object>, zero=True)'
p209
sg85
S'options'
p210
sa(dp211
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\validators.py'
p212
sg64
(dp213
S'self.dbset'
p214
S'<Set None>'
p215
sS'fields'
p216
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>]'
p217
sS'self'
p218
S'<gluon.validators.IS_IN_DB object>'
p219
sS').select'
p220
g107
sS'records'
p221
g107
sS'table'
p222
S'<Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>'
p223
sS'dd'
p224
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p225
ssg70
I584
sg71
(dp226
I579
S'            distinct = self.distinct'
p227
sI580
S'            left = self.left'
p228
sI581
S'            dd = dict(orderby=orderby, groupby=groupby,'
p229
sI582
S'                      distinct=distinct, cache=self.cache,'
p230
sI583
S'                      cacheable=True, left=left)'
p231
sI584
S'            records = self.dbset(table).select(*fields, **dd)'
p232
sI585
S'        else:'
p233
sI586
S'            orderby = self.orderby or \\'
p234
sI587
S'                reduce(lambda a, b: a | b, ('
p235
sI588
S"                    f for f in fields if not f.name == 'id'))"
p236
ssg83
S'(self=<gluon.validators.IS_IN_DB object>)'
p237
sg85
S'build_set'
p238
sa(dp239
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\objects.py'
p240
sg64
(dp241
S'self.query'
p242
S'<Query (deteni2.id IS NOT NULL)>'
p243
sS'adapter.select'
p244
S'<bound method SQLiteAdapter.select of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p245
sS'fields'
p246
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>]'
p247
sS'adapter'
p248
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p249
sS'attributes'
p250
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p251
sS'self'
p252
S'<Set (deteni2.id IS NOT NULL)>'
p253
ssg70
I2020
sg71
(dp254
I2016
S"                                    attributes.get('left', None),"
p255
sI2017
S"                                    attributes.get('orderby', None),"
p256
sI2018
S"                                    attributes.get('groupby', None))"
p257
sI2019
S'        fields = adapter.expand_all(fields, tablenames)'
p258
sI2020
S'        return adapter.select(self.query, fields, attributes)'
p259
sI2021
S''
sI2022
S'    def iterselect(self, *fields, **attributes):'
p260
sI2023
S'        adapter = self.db._adapter'
p261
sI2024
S'        tablenames = adapter.tables(self.query,'
p262
sI2015
S"                                    attributes.get('join', None),"
p263
ssg83
S"(self=<Set (deteni2.id IS NOT NULL)>, *fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], **attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p264
sg85
S'select'
p265
sa(dp266
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py'
p267
sg64
(dp268
S'fields'
p269
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>]'
p270
sS'self'
p271
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p272
sS').select'
p273
S'<bound method SQLiteAdapter.select of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p274
sS'attributes'
p275
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p276
sS'global SQLiteAdapter'
p277
S"<class 'pydal.adapters.sqlite.SQLiteAdapter'>"
p278
sS'query'
p279
S'<Query (deteni2.id IS NOT NULL)>'
p280
sS'builtinsuper'
p281
S"<type 'super'>"
p282
ssg70
I123
sg71
(dp283
I118
S'        Note that the entire database, rather than one record, is locked'
p284
sI119
S'        (it will be locked eventually anyway by the following UPDATE).'
p285
sI120
S'        """'
p286
sI121
S"        if attributes.get('for_update', False) and not 'cache' in attributes:"
p287
sI122
S"            self.execute('BEGIN IMMEDIATE TRANSACTION;')"
p288
sI123
S'        return super(SQLiteAdapter, self).select(query, fields, attributes)'
p289
sI124
S''
sI125
S''
sI126
S'SPATIALLIBS = {'
p290
sI127
S"    'Windows':'mod_spatialite.dll',"
p291
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, query=<Query (deteni2.id IS NOT NULL)>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p292
sg85
g265
sa(dp293
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p294
sg64
(dp295
S'fields'
p296
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>]'
p297
sS'self'
p298
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p299
sS'attributes'
p300
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p301
sS'self._select_aux'
p302
S'<bound method SQLiteAdapter._select_aux of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p303
sS'sql'
p304
S"'SELECT  deteni2.dni, deteni2.apellido, deteni2.n...i2.nacionalidad, deteni2.tipo_delito, deteni2.id;'"
p305
ssg70
I1296
sg71
(dp306
I1291
S'            return cache_model('
p307
sI1292
S'                key,'
p308
sI1293
S'                lambda self=self,args=args:self._select_aux(*args),'
p309
sI1294
S'                time_expire)'
p310
sI1295
S'        else:'
p311
sI1296
S'            return self._select_aux(sql,fields,attributes)'
p312
sI1297
S''
sI1298
S'    def iterselect(self, query, fields, attributes):'
p313
sI1299
S'        sql = self._select(query, fields, attributes)'
p314
sI1300
S"        cacheable = attributes.get('cacheable', False)"
p315
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, query=<Query (deteni2.id IS NOT NULL)>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p316
sg85
g265
sa(dp317
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p318
sg64
(dp319
S'rows'
p320
S"[(u'12122', u'robles', u'edgardo', u'pallo', u'argentino', u'6', 20), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 10), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 11), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 12), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 4), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 6), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 7), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 8), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 9), (u'1616177', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'6', 14), (u'2323', u'toritto', u'machito', u'gordo', u'argentino', u'6', 16), (u'2525', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'7', 13), (u'3456', None, None, u'macho alfa', u'argentino', u'robo de motos', 3), (u'393939', u'matias', u'diosque', u'tranquilo', u'argentino', u'7', 15), (u'4525684', u'robles', u'ivana', u'tranquilo', u'argentino', u'6', 18), (u'452569', u'robles', u'ivana', u'caniche', u'argentino', u'6', 19), (u'454545', u'robles', u'ivana', u'caniche', u'argentino', u'6', 17), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 1), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 2), (u'54534534', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 5)]"
p321
sS'fields'
p322
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>]'
p323
sS'self'
p324
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p325
sS'cacheable'
p326
g130
sS'self._colnames'
p327
S"['deteni2.dni', 'deteni2.apellido', 'deteni2.nombre', 'deteni2.aliass', 'deteni2.nacionalidad', 'deteni2.tipo_delito', 'deteni2.id']"
p328
sS'processor'
p329
S'<bound method SQLiteAdapter.parse of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p330
ssg70
I1277
sg71
(dp331
I1280
S'        """'
p332
sI1281
S'        Always returns a Rows object, possibly empty.'
p333
sI1272
S'            rows = list(rows)'
p334
sI1273
S"        limitby = args_get('limitby', None) or (0,)"
p335
sI1274
S'        rows = self.rowslice(rows,limitby[0],None)'
p336
sI1275
S"        processor = args_get('processor', self.parse)"
p337
sI1276
S"        cacheable = args_get('cacheable',False)"
p338
sI1277
S'        return processor(rows,fields,self._colnames,cacheable=cacheable)'
p339
sI1278
S''
sI1279
S'    def select(self, query, fields, attributes):'
p340
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, sql='SELECT  deteni2.dni, deteni2.apellido, deteni2.n...i2.nacionalidad, deteni2.tipo_delito, deteni2.id;', fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p341
sg85
S'_select_aux'
p342
sa(dp343
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p344
sg64
(dp345
S'rows'
p346
S"[(u'12122', u'robles', u'edgardo', u'pallo', u'argentino', u'6', 20), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 10), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 11), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 12), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 4), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 6), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 7), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 8), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 9), (u'1616177', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'6', 14), (u'2323', u'toritto', u'machito', u'gordo', u'argentino', u'6', 16), (u'2525', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'7', 13), (u'3456', None, None, u'macho alfa', u'argentino', u'robo de motos', 3), (u'393939', u'matias', u'diosque', u'tranquilo', u'argentino', u'7', 15), (u'4525684', u'robles', u'ivana', u'tranquilo', u'argentino', u'6', 18), (u'452569', u'robles', u'ivana', u'caniche', u'argentino', u'6', 19), (u'454545', u'robles', u'ivana', u'caniche', u'argentino', u'6', 17), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 1), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 2), (u'54534534', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 5)]"
p347
sS'row'
p348
S"(u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 4)"
p349
ssg70
I1767
sg71
(dp350
I1762
S''
sI1763
S'    def parse(self, rows, fields, colnames, blob_decode=True, cacheable=False):'
p351
sI1764
S'        (fields_virtual, fields_lazy, tmps) = self._parse_expand_colnames(colnames)'
p352
sI1765
S'        new_rows = [self._parse(row, tmps, fields, colnames, blob_decode,'
p353
sI1766
S'                                cacheable, fields_virtual, fields_lazy)'
p354
sI1767
S'                    for row in rows]'
p355
sI1768
S''
sI1769
S'        rowsobj = Rows(self.db, new_rows, colnames, rawrows=rows)'
p356
sI1770
S''
sI1771
S'        # Old stype virtual fields'
p357
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, rows=[(u'12122', u'robles', u'edgardo', u'pallo', u'argentino', u'6', 20), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 10), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 11), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'6', 12), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 4), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 6), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 7), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 8), (u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 9), (u'1616177', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'6', 14), (u'2323', u'toritto', u'machito', u'gordo', u'argentino', u'6', 16), (u'2525', u'gonzalo', u'bobo', u'yuyu', u'argentino', u'7', 13), (u'3456', None, None, u'macho alfa', u'argentino', u'robo de motos', 3), (u'393939', u'matias', u'diosque', u'tranquilo', u'argentino', u'7', 15), (u'4525684', u'robles', u'ivana', u'tranquilo', u'argentino', u'6', 18), (u'452569', u'robles', u'ivana', u'caniche', u'argentino', u'6', 19), (u'454545', u'robles', u'ivana', u'caniche', u'argentino', u'6', 17), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 1), (u'474748', None, None, u'gaturro', u'argentino', u'robo de motos', 2), (u'54534534', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 5)], fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], colnames=['deteni2.dni', 'deteni2.apellido', 'deteni2.nombre', 'deteni2.aliass', 'deteni2.nacionalidad', 'deteni2.tipo_delito', 'deteni2.id'], blob_decode=True, cacheable=True)"
p358
sg85
S'parse'
p359
sa(dp360
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p361
sg64
(dp362
S'blob_decode'
p363
g130
sS'self'
p364
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p365
sS'ft'
p366
S"'reference delito'"
p367
sS'value'
p368
S"u'mechera'"
p369
sS'self.parse_value'
p370
S'<bound method SQLiteAdapter.parse_value of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p371
ssg70
I1677
sg71
(dp372
I1672
S'                (tablename, fieldname, table, field, ft) = tmp'
p373
sI1673
S'                colset = new_row.get(tablename, None)'
p374
sI1674
S'                if colset is None:'
p375
sI1675
S'                    colset = new_row[tablename] = self.db.Row()'
p376
sI1676
S''
sI1677
S'                value = self.parse_value(value, ft, blob_decode)'
p377
sI1678
S'                if field.filter_out:'
p378
sI1679
S'                    value = field.filter_out(value)'
p379
sI1680
S'                colset[fieldname] = value'
p380
sI1681
S''
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, row=(u'1616177', None, None, u'chiwawawe\\xf1a', u'argentino', u'mechera', 4), tmps=[('deteni2', 'dni', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'integer'), ('deteni2', 'apellido', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'string'), ('deteni2', 'nombre', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'string'), ('deteni2', 'aliass', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'string'), ('deteni2', 'nacionalidad', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'string'), ('deteni2', 'tipo_delito', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'reference delito'), ('deteni2', 'id', <Table deteni2 (id, dni, apellido, nombre, alias...micilio, sexo, zona_operando, tipo_delito, foto)>, <pydal.objects.Field object>, 'id')], fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>], colnames=['deteni2.dni', 'deteni2.apellido', 'deteni2.nombre', 'deteni2.aliass', 'deteni2.nacionalidad', 'deteni2.tipo_delito', 'deteni2.id'], blob_decode=True, cacheable=True, fields_virtual={'deteni2': []}, fields_lazy={'deteni2': []})"
p381
sg85
S'_parse'
p382
sa(dp383
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p384
sg64
(dp385
S'field_type'
p386
S"'reference delito'"
p387
sS'self'
p388
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p389
sS'self.parsemap'
p390
S"{'bigint': <bound method SQLiteAdapter.parse_integer of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'blob': <bound method SQLiteAdapter.parse_blob of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'boolean': <bound method SQLiteAdapter.parse_boolean of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'date': <bound method SQLiteAdapter.parse_date of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'datetime': <bound method SQLiteAdapter.parse_datetime of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'decimal': <bound method SQLiteAdapter.parse_decimal of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'double': <bound method SQLiteAdapter.parse_double of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'float': <bound method SQLiteAdapter.parse_double of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'id': <bound method SQLiteAdapter.parse_id of <pydal.adapters.sqlite.SQLiteAdapter object>>, 'integer': <bound method SQLiteAdapter.parse_integer of <pydal.adapters.sqlite.SQLiteAdapter object>>, ...}"
p391
sS'value'
p392
S"'mechera'"
p393
sS'key'
p394
S"'reference'"
p395
ssg70
I1527
sg71
(dp396
I1522
S'            return value'
p397
sI1523
S"        elif field_type == 'blob' and not blob_decode:"
p398
sI1524
S'            return value'
p399
sI1525
S'        else:'
p400
sI1526
S'            key = REGEX_TYPE.match(field_type).group(0)'
p401
sI1527
S'            return self.parsemap[key](value,field_type)'
p402
sI1528
S''
sI1529
S'    def parse_reference(self, value, field_type):'
p403
sI1530
S'        referee = field_type[10:].strip()'
p404
sI1531
S"        if not '.' in referee:"
p405
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, value='mechera', field_type='reference delito', blob_decode=True)"
p406
sg85
S'parse_value'
p407
sa(dp408
g62
S'D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py'
p409
sg64
(dp410
S'global Reference'
p411
S"<class 'pydal.helpers.classes.Reference'>"
p412
sS'value'
p413
S"'mechera'"
p414
ssg70
I1532
sg71
(dp415
I1536
S'    def parse_boolean(self, value, field_type):'
p416
sI1527
S'            return self.parsemap[key](value,field_type)'
p417
sI1528
S''
sI1529
S'    def parse_reference(self, value, field_type):'
p418
sI1530
S'        referee = field_type[10:].strip()'
p419
sI1531
S"        if not '.' in referee:"
p420
sI1532
S'            value = Reference(value)'
p421
sI1533
S'            value._table, value._record = self.db[referee], None'
p422
sI1534
S'        return value'
p423
sI1535
S''
ssg83
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, value='mechera', field_type='reference delito')"
p424
sg85
S'parse_reference'
p425
sasS'pyver'
p426
S'Python 2.7.9: D:\\backup servidor\\uli\\web2py\\web2py\\web2py.exe (prefix: C:\\Python27)'
p427
sS'session'
p428
g57
(S's8\x01\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.ingreso.id&gt;0</div></td></tr></table></div>'
tRp429
sS'etype'
p430
S"<type 'exceptions.ValueError'>"
p431
sS'date'
p432
S'Thu Oct 06 19:22:06 2016'
p433
sS'response'
p434
g57
(S's\x93\x1f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x08993380&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_deteni2</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>dise\xc3\xb1o</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/deteni2</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>bdd</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/deteni2/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>estado</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/deteni2/appadmin/state</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>cach\xc3\xa9</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/deteni2/appadmin/ccache</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>web2py</div></td></tr><tr><td><div>python</div></td></tr><tr><td><div>framework</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/insert/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_deteni2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;D:\\\\backup servidor\\\\uli\\\\web2py\\\\web2py\\\\applications\\\\deteni2\\\\sessions\\\\1f7\\\\089\\\\127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21&#x27;, mode &#x27;rb+&#x27; at 0x07C15078&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\sessions\\127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>0b07c62dc32fe53c2139b96b753445d1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-a5a5cf58-15f4-42cb-a223-065f77159b21</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_deteni2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>deteni2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div>Administraci\xc3\xb3n de Base de Datos (appadmin)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Deteni2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>appadmin.html</div></td></tr></table></div>'
tRp435
sS'locals'
p436
(dp437
S'field_type'
p438
S"'reference delito'"
p439
sS'self'
p440
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p441
sS'referee'
p442
S"'delito'"
p443
sS'value'
p444
S"'mechera'"
p445
sssS'traceback'
p446
S'Traceback (most recent call last):\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/appadmin.py", line 703, in <module>\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/appadmin.py", line 150, in insert\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\sqlhtml.py", line 1295, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\sqlhtml.py", line 313, in widget\n    options = requires[0].options()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\validators.py", line 598, in options\n    self.build_set()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\validators.py", line 584, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1277, in _select_aux\n    return processor(rows,fields,self._colnames,cacheable=cacheable)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1767, in parse\n    for row in rows]\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1677, in _parse\n    value = self.parse_value(value, ft, blob_decode)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1527, in parse_value\n    return self.parsemap[key](value,field_type)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1532, in parse_reference\n    value = Reference(value)\nValueError: invalid literal for long() with base 10: \'mechera\'\n'
p447
s.