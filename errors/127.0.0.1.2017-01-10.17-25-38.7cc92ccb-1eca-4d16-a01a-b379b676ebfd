(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'None'"
p3
sS'layer'
p4
S'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py'
p5
sS'code'
p6
S'\n# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    redirect(URL(\'default\', \'principal\'))\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\n@auth.requires_login()\ndef index():\n    return dict()\n\ndef consulta1():\n    form=FORM(TABLE(TR("Ingresar el DNI a consultar:",INPUT(_type="integer",_name="dni",requires=IS_NOT_EMPTY())),\n                        \n                        TR("",INPUT(_type="submit",_value="Enviar"))))\n    if form.accepts(request.vars,session):\n        response.flash="formulario aceptado"\n        redirect(URL(\'proceso_consul1\', args=[form.vars.dni]))\n    elif form.errors:\n            response.flash="formulario inv\xc3\xa1lido"\n    else:\n        response.flash="por favor complete el formulario"\n    return dict(form=form)   \n\n\ndef proceso_consul1():\n    atrapa = request.args[0]\n    \n    consulta = (db.deteni2.dni==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    \n\n\n\n\n    a = miset.count() \n\n    if a == 0:\n         redirect(URL(\'sin_dni\', args=[atrapa]))\n    \n\n\n\n    return dict(a=a, atrapa=atrapa, registros=registros)\ndef sin_dni():\n    atrapa= request.args[0]\n\n\n\n\n\n\n\n    \n    return dict(atrapa=atrapa)\n\n\n                                        \n                    \n\ndef deteni2():\n    atrapa=request.args[0]\n    db.deteni2.dni.default=request.args[0]\n\n    form = SQLFORM(db.deteni2)\n    \n        \n      \n    if form.process().accepted:\n\n       \n\n\n      \n      \n      \n\n        \n        \n        response.flash = \'Formulario Aceptado\'\n        redirect(URL(c=\'default\', f=\'ingreso\',args=[form.vars.id]))\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n\n\ndef ingreso():\n\n    \n    atrapa =request.args[0]\n    consulta = (db.deteni2.id==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    i=registros\n    \n\n    \n    \n    \n\n\n\n    \n\n    db.ingreso.persona.default = request.args[0] #-- Coloco el nombre de la agencia ya en el campo correspondiente\n\n\n    \n    form = SQLFORM(db.ingreso)\n\n\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n\n        \n       \n        db.historial.insert(persona=atrapa,comisaria=form.vars.comisaria,organismos=form.vars.organismos,delitos=form.vars.delitos,comentario=form.vars.comentario,es=form.vars.es,calidad=form.vars.calidad,comentarios=form.vars.comentarios,horario=form.vars.horario)\n           \n\n\n\n\n        \n\n\n        redirect(URL(c=\'default\', f=\'ingreso\',args=[form.vars.persona]))\n\n\n    elif form.errors:\n                response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form,atrapa=atrapa,i=i,consulta=consulta,miset=miset,registros=registros)\n        \n         \n    \n    \n   \n\n\n\n\n\n\n    \n    return dict(form=form, atrapa=atrapa,miset=miset,registros=registros,consulta=consulta,i=i)\n\ndef proceso_consul2():\n    id_detenido = request.args[0]\n    atrapa =request.vars.dni\n    \n    consulta = (db.deteni2.dni==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    for i in registros:\n        print i.id\n    \n    crud.settings.update_next = URL(f=\'index\', args=[atrapa])\n    form = crud.update(db.deteni2, id_detenido) #esto me permite  modificar un row pero antes hay importar un crud en db.py en gluon\n    if form.accepts(request.vars,session):\n        response.flash="formulario aceptado"\n\n        redirect(URL(\'proceso_consul1\', args=[form.vars.persona, request.args[1]]))\n    \n    \n\n\n    return dict(atrapa=atrapa,consulta=consulta,registros=registros,miset=miset, form=form)\n\ndef nuevas_dependencias():\n\n        \n    return dict()\n\n\n\ndef nuevas_dep_pol():\n    form = SQLFORM(db.dependencias_polciales)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n\ndef nuevas_dep_judi():\n    form = SQLFORM(db.dependencias_organismos)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n    \ndef nuevos_delitos():\n    form = SQLFORM(db.delito)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n\n \n\n\n\n\n\n\ndef proceso_consul3():\n   \n\n    return dict()\n\n\n\n\ndef sin2_dni():\n    atrapa=request.args[0]\n    redirect(URL(\'ingreso\', args=[atrapa]))\n\n\n    \n    \n        \n  \n\n       \n   \n     \n \n   \n    return dict(atrapa=atrapa) \n\n\n\ndef consulta():\n    query=db(db.ingreso.es != "salida")\n    \n\n    \n    grid = SQLFORM.grid(query,deletable=False,paginate=20,editable=False,\n        links=[lambda r: editar_expediente(r)])\n    \n\n\n\n    \n    \n\n    \n    \n\n        \n    \n\n    return dict(grid=grid,query=query)\n\ndef historial():\n    \n\n    grid = SQLFORM.smartgrid(db.deteni2, linked_tables=[\'historial\'],deletable=False,paginate=10,editable=False,upload=\'<default>\')\n    return locals()\n\n\n\n\n    \n\n    \n    return dict(grid=grid)\n#agregar boton al grid\n#creando el boton    \ndef editar_expediente(row):\n        btn = A(I(_class=\'icon-thumbs-up\'),\n                    \' CAMBIAR ESTADO\',\n                    _href=URL(c=\'default\', f=\'libertad\', args=[row.id]),\n                    _class=\'btn btn-primary\')\n        return btn     \ndef libertad():\n     \n    atrapa =request.args[0]\n    \n    v = db(db.ingreso.id == atrapa).select(db.ingreso.ALL)\n    for a in v:\n        p=a.persona\n        c=a.comisaria\n        o=a.organismos\n        d=a.delitos\n        co=a.comentario\n        es=a.es\n        ca=a.calidad\n        cos=a.comentarios\n        ho=a.horario\n\n\n\n        \n\n\n       \n\n\n \n            \n    \n    \n    \n\n\n   \n\n    \n\n        db.ingreso.persona.default = p         #-- Coloco el nombre de la agencia ya en el campo correspondiente\n        db.ingreso.comisaria.default = c\n        db.ingreso.organismos.default = o\n        db.ingreso.delitos.default = d\n        db.ingreso.comentario.default= co\n        \n        db.ingreso.calidad.default = ca\n\n        \n        \n\n        \n        \n\n\n        \n\n\n        \n\n\n\n\n    \n    \n    \n    \n    \n  \n  \n   \n\n    \n    \n\n\n    \n\n\n\n    \n         \n    form=SQLFORM(db.ingreso)\n\n\n\n   \n\n\n\n\n\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n        #aca estoy trabado de aca eliminaba el el el registro anterior para no tener 2 registros sino el ultimo en la tabla ingreso\n        db.ingreso.update_record(comisaria=c,organismos=o,delitos=d, comentario=co,es=es,calidad=ca, comentarios=cos, horario=ho)        \n\n\n        \n        \n\n       \n\n        db.historial.insert(persona=p,comisaria=c,organismos=o,delitos=d, comentario=co,es=es,calidad=ca, comentarios=cos, horario=ho)\n        \n        \n        \n        \n       \n        \n        \n       \n       \n       \n        \n        \n\n\n\n       \n\n        \n\n\n        \n        \n        \n\n          \n\n        redirect(URL(\'index\'))\n    elif form.errors:\n            response.flash="formulario inv\xc3\xa1lido"\n    else:\n        response.flash="por favor complete el formulario"\n    return dict(form=form,atrapa=atrapa,consulta=consulta,v=v,a=a,p=p,c=c,o=o,es=es,ca=ca,cos=cos,ho=ho)\n\n\n    \n\n    \n\n\n\n\n        \n    \n    \n   \n    \n\n    \n    \n\n    \n    \n    \n\n\n\n\nresponse._vars=response._caller(ingreso)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py", line 507, in <module>\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py", line 168, in ingreso\n    registros = miset.select()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'None\'\n'
p11
s.