(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '_args=_c_'"
p3
sS'layer'
p4
S'D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py'
p5
sS'code'
p6
S'\n\ndef index():\n    return dict()\ndef mostrar():\n    return locals()    \n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef consulta1():\n   \n    form=SQLFORM.factory(Field(\'dni\',\'integer\',length=12,requires=IS_NOT_EMPTY()))\n    if form.accepts(request.vars,session):\n        response.flash="formulario aceptado"\n        redirect(URL(\'proceso_consul1\', args=[form.vars.dni]))\n    elif form.errors:\n            response.flash="formulario inv\xc3\xa1lido"\n    else:\n        response.flash="por favor complete el formulario"\n    return dict(form=form) \n \n\n\ndef proceso_consul1():\n    atrapa = request.args[0]\n    \n    consulta = (db.deteni2.dni==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    \n\n\n\n\n    a = miset.count() \n\n    if a == 0:\n         redirect(URL(\'sin_dni\', args=[atrapa]))\n    \n\n\n\n    return dict(a=a, atrapa=atrapa, registros=registros)\n\n    \ndef proceso_consul2():\n    id_detenido = request.args[0]\n    atrapa = request.args[1]\n    \n    consulta = (db.deteni2.dni==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    for i in registros:\n        print i.id\n    \n    crud.settings.update_next = URL(f=\'proceso_consul1\', args=[atrapa])\n    \n    form = crud.update(db.deteni2, id_detenido) #esto me permite  modificar un row pero antes hay importar un crud en db.py en gluon\n    \n\n    if form.accepts(request.vars,session):\n        response.flash="formulario aceptado"\n\n        redirect(URL(\'proceso_consul1\', args=[form.vars.dni,request.args[1]]))\n    \n    \n\n\n    return dict(atrapa=atrapa,consulta=consulta,registros=registros,miset=miset, form=form)\ndef sin_dni():\n    atrapa= request.args[0]\n\n\n\n\n\n\n\n    \n    return dict(atrapa=atrapa)\n\n\n                                        \n                    \n\ndef deteni2():\n    \n    \n    atrapa=request.args[0]\n    db.deteni2.dni.default=request.args[0]\n\n    form = SQLFORM(db.deteni2)\n\n    \n    \n    \n    \n\n\n    \n    \n        \n      \n    if form.process().accepted:\n        \n    \n\n       \n\n\n      \n      \n      \n\n        \n        \n        response.flash = \'Formulario Aceptado\'\n        redirect(URL(c=\'default\', f=\'ingreso\',args=[form.vars.id]))\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form,atrapa=atrapa,)\n\n\n\ndef ingreso():\n    \n\n\n    #atrapo el argumento id\n    atrapa =request.args[0]\n    consulta = (db.deteni2.id==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    i=registros\n\n    \n    #atrapo el dia de hoy\n    ed=datetime.date.today()\n    edad=0\n    \n    \n\n    #capturo la fecha de nacimiento\n    for x in i:\n        fecha=x.fecha_naci\n    #calculo la edad\n    edad=(ed.year)-(fecha.year)\n\n    \n\n\n    \n\n    db.ingreso.persona.default = request.args[0] #-- Coloco el nombre de la agencia ya en el campo correspondiente\n\n\n    \n    form = SQLFORM(db.ingreso)\n    c=form.vars.id\n    \n    form.add_button(\'agregar nuevos valores\', URL(\'nuevas_dependencias,\'))\n    #realizo la consulta del id de la persona para mandar la edad\n    d=db(db.deteni2.id==atrapa).select().first()\n    \n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n\n        \n\n        #envio la edad a la persona\n        d.update_record(edad=edad)\n        #actualizo el ultimo registro\n\n\n       \n        db.historial.insert(persona=atrapa,comisaria=form.vars.comisaria,organismos=form.vars.organismos,delitos=form.vars.delitos,comentario=form.vars.comentario,es=form.vars.es,calidad=form.vars.calidad,comentarios=form.vars.comentarios,trasladado=form.vars.trasladado,horario=form.vars.horario)\n        \n        \n        redirect(URL(c=\'default\', f=\'index\'))\n\n\n\n     \n\n\n        \n         \n    \n    \n   \n\n\n\n\n\n\n    \n    return dict(form=form,ed=ed, atrapa=atrapa,miset=miset,registros=registros,consulta=consulta,i=i,x=x,fecha=fecha,edad=edad,d=d)\n\ndef download():\n    return dict()\n\n\ndef nuevas_dependencias():\n\n        \n    return dict()\ndef nueva_comisaria():\n    form = SQLFORM(db.dependencias_polciales)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n        redirect(URL(c=\'default\', f=\'index\'))\n\n        \n    \n\n    return dict(form=form)\ndef nueva_judicial():\n    form = SQLFORM(db.dependencias_organismos)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n        redirect(URL(c=\'default\', f=\'index\'))\n\n\n    return dict(form=form)\n    \ndef nuevos_delitos():\n    form = SQLFORM(db.delito)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n        redirect(URL(c=\'default\', f=\'index\'))\n    return dict(form=form)\n\n\n\n\n    \n\n\n\ndef nuevas_dep_pol():\n    form = SQLFORM(db.dependencias_polciales)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n\ndef nuevas_dep_judi():\n    form = SQLFORM(db.dependencias_organismos)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n    \ndef nuevos_delitos():\n    form = SQLFORM(db.delito)\n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'\n    return dict(form=form)\n\n \n\n\n\n\n\n\ndef proceso_consul3():\n    atrapa = request.args[0]\n    query=db(db.deteni2.dni==atrapa).select().first()\n    \n    consulta = (db.deteni2.dni==atrapa)\n    miset = db(consulta)\n    registros = miset.select()\n    form=SQLFORM.grid(db.registros)\n    \n\n\n\n\n    a = miset.count() \n    if a == 0:\n\n    \n        redirect(URL(\'sin_dni\', args=[atrapa]))\n        \n        \n\n\n\n   \n\n    return dict(query=query,miset=miset,a=a,consulta=consulta,atrapa=atrapa,registros=registros,grid=grid)\n\n\n\n\ndef sin2_dni():\n    atrapa=request.args[0]\n    redirect(URL(\'ingreso\', args=[atrapa]))\n\n\n    \n    \n        \n  \n\n       \n   \n     \n \n   \n    return dict(atrapa=atrapa) \n\n\n\ndef consulta():\n    \n    \n\n\n    query=db((db.ingreso.es != "salida")&(db.ingreso.calidad != "LIBERTAD")&(db.ingreso.trasladado!="7"))#&(db.ingreso.horario==hora_max))\n    \n\n    \n    grid = SQLFORM.grid(query,\n        deletable=False,\n        paginate=20,\n        sortable=True,\n        editable=False,\n        csv=False,\n        links=[lambda r: editar_expediente(r)])\n    return locals()\n\n\n\n    \n    \n\n    \n    \n\n        \n    \n\n    return dict(grid=grid,query=query)#hora_max=hora_max)\n\ndef search_form(self,url): \n    form = FORM(\'\',\n    INPUT(_name=\'keywords\',_value=request.get_vars.keywords, \n               _style=\'width:200px;\', \n               _id=\'keywords\'), \n\n\n         INPUT(_type=\'submit\',_value=T(\'Search\')), \n         INPUT(_type=\'submit\',_value=T(\'Clear\'),\n\n         _onclick="jQuery(\'#keywords\').val(\'\');"), \n         _method="GET",_action=url) \n    return form \ndef search_query(tableid,search_text,fields): \n    words= search_text.split(\' \') if search_text else [] \n    query=tableid<0#empty query \n    for field in fields: \n        new_query=tableid>0 \n        for word in words: \n            new_query=new_query&field.contains(word) \n        query=query|new_query \n    return query\n\n\ndef historial():\n    \n\n    grid = SQLFORM.smartgrid(db.deteni2, linked_tables=[\'historial\'],\n        deletable=False,\n        paginate=20,editable=False,\n        create=False,\n        csv=False,\n        searchable=True,\n        search_widget=search_form,\n        user_signature=False,\n\n       \n        selectable=None,\n        upload=\'<default>\')\n    # Cambiando la clase para el bot\xc3\xb3n submit.\n    if grid.element(\'input\', _type=\'submit\'):\n        grid.element(\'input\', _type=\'submit\')[\'_class\'] = \'btn btn-primary\'\n    return dict(grid = grid)\n       \n        \n\n\n\n    \n\n    \n    \n\n    \n#agregar boton al grid\n#creando el boton    \ndef editar_expediente(row):\n        btn = A(I(_class=\'icon-thumbs-up\'),\n                    \' CAMBIAR ESTADO\',\n                    _href=URL(c=\'default\', f=\'libertad\', args=[row.id]),\n                    _class=\'btn btn-primary\')\n        return btn     \n\ndef libertad():\n     #atrapo argumento\n    atrapa =request.args[0]\n\n    #saco los datos para cargar los datos que necesito\n    v = db(db.ingreso.id == atrapa).select(db.ingreso.ALL)\n    for a in v: \n        p=a.persona\n        c=a.comisaria\n        o=a.organismos\n        d=a.delitos\n        co=a.comentario\n        es=a.es\n        ca=a.calidad\n        cos=a.comentarios\n        \n\n\n\n        \n\n\n       \n\n\n \n            \n    \n    \n    \n\n\n   \n\n        #cologo con valores rescatados en los campos del formulario\n        db.ingreso.persona.default = p         #-- Coloco el nombre de la agencia ya en el campo correspondiente\n        db.ingreso.comisaria.default = c\n        db.ingreso.organismos.default = o\n        db.ingreso.delitos.default = d\n        db.ingreso.comentario.default= co\n        \n        db.ingreso.calidad.default = ca\n\n        \n        \n\n        \n        \n\n\n        \n\n\n        \n\n\n\n\n    \n    \n    \n    \n    \n  \n  \n   \n\n    \n    \n    #re\n\n    \n    registro = db(db.ingreso.id==atrapa).select().first() or redirect(URL(\'index\'))\n\n\n   \n   \n    form=SQLFORM(db.ingreso,registro)\n\n    \n\n\n\n\n   \n\n\n\n    z=db(db.ingreso.id==atrapa).select().first()\n    \n    \n    \n    if form.process().accepted:\n        response.flash = \'Formulario Aceptado\'\n\n        \n\n        \n        \n        #z.update_record(comisaria=form.vars.comisaria,organismos=form.vars.organismos,comentario=form.vars.comentario,es=form.vars.es,calidad=form.vars.calidad,horario=form.vars.horario)\n        \n        db.historial.insert(persona=p,comisaria=form.vars.comisaria,\n                            organismos=form.vars.organismos,\n                            comentario=form.vars.comentario,\n                            es=form.vars.es,calidad=form.vars.calidad,\n                            horario=form.vars.horario,\n                            trasladado=form.vars.trasladado)\n            \n        \n         \n\n\n        redirect(URL(\'index\'))\n\n    \n\n        \n        \n    elif form.errors:\n        response.flash = \'El formulario es inv\xc3\xa1lido verifique\'   \n                               \n                 \n                                  \n         \n    return dict(form=form,atrapa=atrapa,v=v,a=a,p=p,c=c,o=o,es=es,ca=ca,cos=cos,d=d,z=z,registro=registro)\n\n\n    \n\n    \n\n\n\n\n        \n    \n    \n   \n    \n\n    \n    \n\n    \n    \n    \n\n\n\n\nresponse._vars=response._caller(ingreso)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py", line 571, in <module>\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\applications\\deteni2\\controllers/default.py", line 139, in ingreso\n    registros = miset.select()\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "D:\\backup servidor\\uli\\web2py\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'_args=_c_\'\n'
p11
s.